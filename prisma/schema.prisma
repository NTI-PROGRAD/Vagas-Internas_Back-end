// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ClassesTime {
  Matutino
  Vespertino
  Noturno
  Integral
}

model AdministratorsAccounts {
  id           String  @id @default(uuid())
  login        String  @unique
  password     String
  email        String?
  phoneContact String?

  academicPeriods AcademicPeriod[]
  grantedTimes    GrantedTimes[]

  @@map("administrators_accounts")
}

model GrantedTimes {
  id                     String   @id @default(uuid())
  idAdministratorAccount String
  startTime              DateTime
  endTime                DateTime

  coursesAccountsGetGrantedTimes CoursesAccountsGetGrantedTimes[]

  administrador AdministratorsAccounts @relation(fields: [idAdministratorAccount], references: [id])

  @@map("granted_times")
}

model CoursesAccounts {
  id           String  @id @default(uuid())
  login        String  @unique
  password     String
  email        String?
  phoneContact String?

  coursesAccountsGetGrantedTimes CoursesAccountsGetGrantedTimes[]

  @@map("courses_accounts")
}

model CoursesAccountsGetGrantedTimes {
  idGrantedTime        String
  idCourseAccount      String
  momento_da_concessao DateTime

  granted_time   GrantedTimes    @relation(fields: [idGrantedTime], references: [id])
  course_account CoursesAccounts @relation(fields: [idCourseAccount], references: [id])

  @@id([idGrantedTime, idCourseAccount])
  @@map("courses_accounts_get_granted_times")
}

model Courses {
  id             String      @id @default(uuid())
  name           String
  campus         String
  academicDegree String
  classesTime    ClassesTime

  placesOffer PlacesOffer[]

  @@map("courses")
}

model PlacesOffer {
  idCourse         String
  idAcademicPeriod String
  morningClasses   Int
  afternoonClasses Int
  nightClasses     Int
  fullTimeClasses  Int

  course            Courses        @relation(fields: [idCourse], references: [id])
  periodo_academico AcademicPeriod @relation(fields: [idAcademicPeriod], references: [id])

  @@id([idCourse, idAcademicPeriod])
  @@map("place_offers")
}

model AcademicPeriod {
  id                     String  @id @default(uuid())
  idAdministratorAccount String
  label                  String  @unique
  activePeriod           Boolean

  internalCourseTransfer    Boolean
  internalClassTimeTransfer Boolean
  externalTransfer          Boolean
  diplomaBearer             Boolean

  placesOffer PlacesOffer[]

  administratorAccount AdministratorsAccounts @relation(fields: [idAdministratorAccount], references: [id])

  @@map("academic_periods")
}
