// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ClassesTime {
  Matutino
  Matutino_Vespertino
  Vespertino
  Vespertino_Noturno
  Noturno
}

enum Campus {
  Recife
  Caruaru
  Vitoria
}

enum academicDegree {
  Bacharelado
  Licenciatura
}

enum AcademicCenters {
  CAC
  CB
  CCEN
  CCJ
  CCS
  CCM
  CCSA
  CE
  CFCH
  CIn
  CTG
  CAA
  CAV
}

model AdministratorAccount {
  id           String  @id @default(uuid())
  login        String  @unique
  password     String
  email        String?
  phoneContact String?

  academicPeriods AcademicPeriod[]
  grantedTimes    GrantedTime[]

  @@map("administrators_accounts")
}

model GrantedTime {
  id                     String   @id @default(uuid())
  idAdministratorAccount String
  startTime              DateTime
  endTime                DateTime

  coursesAccountsGetGrantedTimes CourseAccountGetGrantedTime[]

  administrador AdministratorAccount @relation(fields: [idAdministratorAccount], references: [id])

  @@map("granted_times")
}

model CourseAccount {
  id           String  @id @default(uuid())
  login        String  @unique
  password     String
  email        String?
  phoneContact String?
  idCourse     String  @unique

  coursesAccountsGetGrantedTimes CourseAccountGetGrantedTime[]

  course Course @relation(fields: [idCourse], references: [id])

  @@map("courses_accounts")
}

model CourseAccountGetGrantedTime {
  idGrantedTime   String
  idCourseAccount String
  grantDatetime   DateTime

  grantedTime   GrantedTime   @relation(fields: [idGrantedTime], references: [id])
  courseAccount CourseAccount @relation(fields: [idCourseAccount], references: [id])

  @@id([idGrantedTime, idCourseAccount])
  @@map("courses_accounts_get_granted_times")
}

model Course {
  id             String          @id @default(uuid())
  name           String
  campus         Campus
  academicDegree academicDegree
  classesTime    ClassesTime
  academicCenter AcademicCenters

  placesOffer   PlacesOffer[]
  CourseAccount CourseAccount?

  @@map("courses")
}

model PlacesOffer {
  idCourse         String
  idAcademicPeriod String
  morningClasses   Int
  afternoonClasses Int
  nightClasses     Int
  fullTimeClasses  Int

  course         Course         @relation(fields: [idCourse], references: [id])
  academicPeriod AcademicPeriod @relation(fields: [idAcademicPeriod], references: [id])

  @@id([idCourse, idAcademicPeriod])
  @@map("place_offers")
}

model AcademicPeriod {
  id                     String  @id @default(uuid())
  idAdministratorAccount String
  label                  String  @unique
  activePeriod           Boolean

  internalCourseTransfer    Boolean
  internalClassTimeTransfer Boolean
  externalTransfer          Boolean
  diplomaBearer             Boolean

  placesOffer PlacesOffer[]

  administratorAccount AdministratorAccount @relation(fields: [idAdministratorAccount], references: [id])

  @@map("academic_periods")
}
